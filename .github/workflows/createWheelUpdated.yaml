name: Build CeLux CPU Wheel

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  VCPKG_COMMIT: "2024.05.14"
  CMAKE_VERSION: "3.30.1"
  PYTHON_VERSION: "3.13"

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
            python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel build
          python -m pip install delvewheel pytest torch
        
      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitCommitId: ${{ env.VCPKG_COMMIT }}

      - name: Setup CMake
        uses: lukka/get-cmake@latest
        with:
          cmakeVersion: ${{ env.CMAKE_VERSION }}

      - name: Install FFmpeg dependencies via vcpkg
        run: |
          ${{ github.workspace }}/vcpkg/vcpkg install "ffmpeg[avcodec,avformat,swscale,avfilter,x264,x265]:x64-windows-static"
          ${{ github.workspace }}/vcpkg/vcpkg install pybind11:x64-windows-static
          ${{ github.workspace }}/vcpkg/vcpkg install spdlog:x64-windows-static
          ${{ github.workspace }}/vcpkg/vcpkg install fmt:x64-windows-static

      - name: Download libtorch CPU
        run: |
          Invoke-WebRequest -Uri "https://download.pytorch.org/libtorch/cpu/libtorch-win-x64-shared-with-deps-2.2.0%2Bcpu.zip" -OutFile "libtorch-cpu.zip"
          Expand-Archive -Path "libtorch-cpu.zip" -DestinationPath "${{ github.workspace }}/libtorch-cpu"

      - name: Find Python directories for CMake
        run: |
          # Get Python executable path
          $PYTHON_EXECUTABLE = (Get-Command python).Path
          echo "PYTHON_EXECUTABLE=$PYTHON_EXECUTABLE" >> $env:GITHUB_ENV
          
          # Get Python include dir
          $PYTHON_INCLUDE_DIR = python -c "import sysconfig; print(sysconfig.get_path('include'))"
          echo "PYTHON_INCLUDE_DIR=$PYTHON_INCLUDE_DIR" >> $env:GITHUB_ENV
          
          # Get Python library
          $PYTHON_LIBRARY_DIR = python -c "import sysconfig; import os; print(os.path.join(sysconfig.get_config_var('prefix'), 'libs'))"
          $PYTHON_VERSION_NO_DOT = python -c "import sys; print(f'python{sys.version_info.major}{sys.version_info.minor}')"
          $PYTHON_LIBRARY = Join-Path -Path $PYTHON_LIBRARY_DIR -ChildPath "$PYTHON_VERSION_NO_DOT.lib"
          echo "PYTHON_LIBRARY=$PYTHON_LIBRARY" >> $env:GITHUB_ENV

      - name: Configure CMake
        run: |
          $VCPKG_DIR = "${{ github.workspace }}/vcpkg"
          $FFMPEG_DIR = "${{ github.workspace }}/vcpkg/installed/x64-windows-static"
          $TORCH_DIR = "${{ github.workspace }}/libtorch-cpu/libtorch"
          
          cmake -B build -S . `
            -DCMAKE_BUILD_TYPE=Release `
            -DENABLE_CUDA=OFF `
            -DCMAKE_TOOLCHAIN_FILE="$VCPKG_DIR/scripts/buildsystems/vcpkg.cmake" `
            -DFFMPEG_VCPKG_STATIC_DIR="$FFMPEG_DIR" `
            -DTORCH_INSTALL_PREFIX="$TORCH_DIR" `
            -Dpybind11_DIR="$FFMPEG_DIR/share/pybind11" `
            -Dspdlog_DIR="$FFMPEG_DIR/share/spdlog" `
            -Dfmt_DIR="$FFMPEG_DIR/share/fmt" `
            -DPYTHON_EXECUTABLE="${{ env.PYTHON_EXECUTABLE }}" `
            -DPYTHON_INCLUDE_DIR="${{ env.PYTHON_INCLUDE_DIR }}" `
            -DPYTHON_LIBRARY="${{ env.PYTHON_LIBRARY }}"

      - name: Build with CMake
        run: |
          cmake --build build --config Release

      - name: Create Python package
        run: |
          # Get current version from build.py
          $VERSION = Get-Content -Path "${{ github.workspace }}/build.py" | Select-String -Pattern "VERSION\s*=\s*\"([^\"]+)\""
          $VERSION = $VERSION.Matches.Groups[1].Value
          
          # Set environment variable
          $env:CELUX_VERSION = $VERSION
          
          # Create copy of necessary files
          New-Item -ItemType Directory -Path "${{ github.workspace }}/build_temp" -Force
          Copy-Item "${{ github.workspace }}/celux" -Destination "${{ github.workspace }}/build_temp/celux" -Recurse
          
          # Check if cpusetup.py exists, if not, copy setup.py
          if (Test-Path "${{ github.workspace }}/cpusetup.py") {
            Copy-Item "${{ github.workspace }}/cpusetup.py" -Destination "${{ github.workspace }}/build_temp/setup.py"
          } else {
            Copy-Item "${{ github.workspace }}/setup.py" -Destination "${{ github.workspace }}/build_temp/setup.py"
          }
          
          Copy-Item "${{ github.workspace }}/README.md" -Destination "${{ github.workspace }}/build_temp"
          Copy-Item "${{ github.workspace }}/docs" -Destination "${{ github.workspace }}/build_temp/docs" -Recurse
          
          # Change to temp directory
          Push-Location "${{ github.workspace }}/build_temp"
          
          # Build wheel
          python setup.py bdist_wheel
          
          # Return to original directory
          Pop-Location

      - name: Run delvewheel
        run: |
          # Create dist directory if it doesn't exist
          New-Item -ItemType Directory -Path "${{ github.workspace }}/dist" -Force
          
          # Find wheel file
          $wheel_path = Get-ChildItem "${{ github.workspace }}/build_temp/dist/*.whl" | Select-Object -First 1
          
          # Run delvewheel with both torch and ffmpeg paths
          delvewheel repair `
            --add-path "${{ github.workspace }}/libtorch-cpu/libtorch/lib" `
            $wheel_path -w "${{ github.workspace }}/dist"
          
          # List the contents of dist
          Get-ChildItem "${{ github.workspace }}/dist"

      - name: Upload wheel
        uses: actions/upload-artifact@v4
        with:
          name: celux-cpu-wheel
          path: ${{ github.workspace }}/dist/*.whl
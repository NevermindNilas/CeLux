cmake_minimum_required(VERSION 3.15)

# ------------------------------
# 1. Project Setup
# ------------------------------

# Option to enable or disable CUDA support
option(ENABLE_CUDA "Enable CUDA support" ON)

# Use vcpkg toolchain
if(NOT DEFINED CMAKE_TOOLCHAIN_FILE)
    set(CMAKE_TOOLCHAIN_FILE "$ENV{HOME}/vcpkg/scripts/buildsystems/vcpkg.cmake" CACHE STRING "Vcpkg toolchain file")
endif()

# Conditionally include CUDA in the project languages
if(ENABLE_CUDA)
    project(CeLux LANGUAGES CXX CUDA)
else()
    project(CeLux LANGUAGES CXX)
endif()

# Set the C++ standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# ------------------------------
# 2. Find CUDA Toolkit
# ------------------------------

if(ENABLE_CUDA)
    # Optionally specify the CUDA compiler
    set(CMAKE_CUDA_COMPILER /usr/local/cuda-12.6/bin/nvcc)
    
    find_package(CUDAToolkit REQUIRED)
    
    # Manually specify CUDA architectures
    # Replace with your GPU's compute capabilities
    set(CMAKE_CUDA_ARCHITECTURES 60 70 75 80 86)
endif()

# ------------------------------
# 3. Find Other Dependencies (FFmpeg, Torch, Python, etc.)
# ------------------------------

# FFmpeg
find_package(PkgConfig REQUIRED)
pkg_check_modules(FFMPEG REQUIRED IMPORTED_TARGET
    libavutil
    libavcodec
    libavformat
    libavdevice
    libswscale
    libswresample
    libavfilter
)

# Torch
if(ENABLE_CUDA)
    set(TORCH_INSTALL_PREFIX "/opt/libtorch_cuda/libtorch")
else()
    set(TORCH_INSTALL_PREFIX "/opt/libtorch_cpu/libtorch")
endif()
set(CMAKE_PREFIX_PATH "${TORCH_INSTALL_PREFIX}")

find_package(Torch REQUIRED)

# Python
find_package(Python3 COMPONENTS Interpreter Development REQUIRED)

# pybind11, spdlog, fmt
find_package(pybind11 CONFIG REQUIRED)
find_package(spdlog CONFIG REQUIRED)
find_package(fmt CONFIG REQUIRED)

# ------------------------------
# 4. Find Torch Python Library
# ------------------------------

execute_process(
    COMMAND ${Python3_EXECUTABLE} -c "import torch; import os; print(os.path.dirname(torch.__file__))"
    OUTPUT_VARIABLE TORCH_PYTHON_PATH
    OUTPUT_STRIP_TRAILING_WHITESPACE
)

if(NOT TORCH_PYTHON_PATH)
    message(FATAL_ERROR "Could not find torch in the current Python environment.")
endif()

find_library(
    TORCH_PYTHON_LIBRARY
    NAMES torch_python libtorch_python.so
    PATHS "${TORCH_PYTHON_PATH}/lib" "${TORCH_PYTHON_PATH}"
    PATH_SUFFIXES lib
    NO_DEFAULT_PATH
)

if(NOT TORCH_PYTHON_LIBRARY)
    message(FATAL_ERROR "Torch Python library not found.")
endif()

# ------------------------------
# 5. Add Source Files
# ------------------------------

file(GLOB_RECURSE SOURCES_COMMON
    "src/CeLux/*.cpp"
    "src/CeLux/conversion/*.cpp"
    "src/CeLux/backends/*.cpp"
    "src/CeLux/conversion/cpu/*.cpp"
)

if(ENABLE_CUDA)
    file(GLOB_RECURSE SOURCES_CUDA
        "src/CeLux/conversion/gpu/cuda*.cpp"
        "src/CeLux/cuda/*.cu"
    )
    set(SOURCES ${SOURCES_COMMON} ${SOURCES_CUDA})
else()
    set(SOURCES ${SOURCES_COMMON})
endif()

add_library(CeLuxLib STATIC ${SOURCES})

if(ENABLE_CUDA)
    target_compile_definitions(CeLuxLib PUBLIC CUDA_ENABLED)
endif()

# ------------------------------
# 6. Include Directories
# ------------------------------

target_include_directories(CeLuxLib PUBLIC
    ${CMAKE_SOURCE_DIR}/include/CeLux
    ${CMAKE_SOURCE_DIR}/include/CeLux/conversion
    ${CMAKE_SOURCE_DIR}/include/CeLux/conversion/cpu
    ${CMAKE_SOURCE_DIR}/include/CeLux/conversion/gpu
    ${CMAKE_SOURCE_DIR}/include/CeLux/conversion/gpu/cuda
    ${CMAKE_SOURCE_DIR}/include/CeLux/error
    ${CMAKE_SOURCE_DIR}/include/CeLux/backends
    ${TORCH_INCLUDE_DIRS}
    ${TORCH_INCLUDE_DIRS}/torch/csrc/api/include
    ${FFMPEG_INCLUDE_DIRS}
    ${Python3_INCLUDE_DIRS}
    ${spdlog_INCLUDE_DIRS}
    ${fmt_INCLUDE_DIRS}
)

if(ENABLE_CUDA)
    target_include_directories(CeLuxLib PUBLIC ${CUDAToolkit_INCLUDE_DIRS})
endif()

# ------------------------------
# 7. Set Target Properties
# ------------------------------

set_target_properties(CeLuxLib PROPERTIES
    CXX_STANDARD 17
    POSITION_INDEPENDENT_CODE ON
)

if(ENABLE_CUDA)
    set_target_properties(CeLuxLib PROPERTIES
        CUDA_STANDARD 17
        CUDA_STANDARD_REQUIRED ON
        CUDA_SEPARABLE_COMPILATION ON
    )
endif()

# ------------------------------
# 8. Link Libraries
# ------------------------------

target_link_libraries(CeLuxLib PUBLIC
    PkgConfig::FFMPEG
    ${TORCH_LIBRARIES}
    spdlog::spdlog_header_only
    fmt::fmt-header-only
    pthread
    dl
)

if(ENABLE_CUDA)
    target_link_libraries(CeLuxLib PUBLIC
        CUDA::cudart
        CUDA::nppicc
    )
endif()

# ------------------------------
# 9. Build the Python Module
# ------------------------------

add_library(celux MODULE  ${CMAKE_SOURCE_DIR}/src/CeLux/Python/Bindings.cpp)

if(CMAKE_CXX_COMPILER_ID MATCHES "GNU|Clang")
    target_compile_options(celux PRIVATE -O2)
endif()

if(ENABLE_CUDA)
    set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -O3 -use_fast_math")
endif()

target_include_directories(celux PUBLIC
    ${CMAKE_SOURCE_DIR}/include/CeLux
    ${CMAKE_SOURCE_DIR}/include/CeLux/conversion
    ${CMAKE_SOURCE_DIR}/include/CeLux/conversion/cpu
    ${CMAKE_SOURCE_DIR}/include/CeLux/conversion/gpu
    ${CMAKE_SOURCE_DIR}/include/CeLux/conversion/gpu/cuda
    ${CMAKE_SOURCE_DIR}/include/CeLux/error
    ${CMAKE_SOURCE_DIR}/include/CeLux/backends
    ${CMAKE_SOURCE_DIR}/include/CeLux/python
    ${TORCH_INCLUDE_DIRS}
    ${TORCH_INCLUDE_DIRS}/torch/csrc/api/include
    ${FFMPEG_INCLUDE_DIRS}
    ${pybind11_INCLUDE_DIRS}
    ${Python3_INCLUDE_DIRS}
    ${spdlog_INCLUDE_DIRS}
    ${fmt_INCLUDE_DIRS}
)

set_target_properties(celux PROPERTIES
    PREFIX ""  
    SUFFIX ".so"
    CXX_STANDARD 17
    CXX_STANDARD_REQUIRED ON
    POSITION_INDEPENDENT_CODE ON
)

# Ensure the output directory exists
if(ENABLE_CUDA)
    set(OUTPUT_DIR "${CMAKE_SOURCE_DIR}/celux_cuda")
else()
    set(OUTPUT_DIR "${CMAKE_SOURCE_DIR}/celux")
endif()

file(MAKE_DIRECTORY "${OUTPUT_DIR}")

set_target_properties(celux PROPERTIES
    LIBRARY_OUTPUT_DIRECTORY "${OUTPUT_DIR}"
    RUNTIME_OUTPUT_DIRECTORY "${OUTPUT_DIR}"
    ARCHIVE_OUTPUT_DIRECTORY "${OUTPUT_DIR}"
)

target_link_libraries(celux PUBLIC
    CeLuxLib
    ${TORCH_LIBRARIES}
    ${TORCH_PYTHON_LIBRARY}
    PkgConfig::FFMPEG
    ${Python3_LIBRARIES}
    spdlog::spdlog_header_only
    fmt::fmt-header-only
    pthread
    dl
)

if(ENABLE_CUDA)
    target_link_libraries(celux PUBLIC CUDA::cudart)
endif()

# ------------------------------
# 10. Optional: Clean Up Other Output Directories
# ------------------------------

set_target_properties(CeLuxLib PROPERTIES
    ARCHIVE_OUTPUT_DIRECTORY "${OUTPUT_DIR}"
)
